{"version":3,"sources":["Carousel.js","Modal.js","Details.js"],"names":["Carousel","props","state","photos","active","handleIndexClick","bind","React","Component","event","setState","target","dataset","index","value","map","photo","media","filter","Modal","el","document","createElement","modalRoot","getElementById","appendChild","removeChild","children","Details","petfinder","key","secret","loading","showModal","toggleModal","pet","get","output","id","then","data","breed","Array","isArray","breeds","join","name","animal","location","contact","city","description","catch"],"mappings":"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","file":"Details.aa347d25.map","sourceRoot":"../src","sourcesContent":["import React from \"react\";\n\nclass Carousel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      photos: [],\n      active: 0\n    };\n    this.handleIndexClick = this.handleIndexClick.bind(this);\n  }\n\n  static getDerivedStateFromProps({ media }) {\n    let photos = [];\n\n    if (media && media.photos && media.photos.photo) {\n      photos = media.photos.photo.filter(photo => photo[\"@size\"] === \"pn\");\n    }\n\n    return { photos: photos };\n  }\n\n  handleIndexClick(event) {\n    this.setState({\n      active: +event.target.dataset.index\n    });\n  }\n\n  render() {\n    const { photos, active } = this.state;\n    return (\n      <div className=\"carousel\">\n        <img src={photos[active].value} alt=\"primary animal\" />\n        <div className=\"carousel-smaller\">\n          {photos.map((photo, index) => (\n            /* eslint-disable-next-line */\n            <img\n              onClick={this.handleIndexClick}\n              key={photo.value}\n              data-index={index}\n              src={photo.value}\n              className={index === active ? \"active\" : \"\"}\n              alt=\"animal thumbnail\"\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","// taken from React docs\nimport React from \"react\";\nimport { createPortal } from \"react-dom\";\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.el = document.createElement(\"div\");\n    this.modalRoot = document.getElementById(\"modal\");\n    this.modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    this.modalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return createPortal(this.props.children, this.el);\n  }\n}\n\nexport default Modal;\n","import React from \"react\";\nimport pf from \"petfinder-client\";\nimport { navigate } from \"@reach/router\";\nimport Carousel from \"./Carousel\";\nimport Modal from \"./Modal\";\n\nconst petfinder = pf({\n  key: process.env.API_KEY,\n  secret: process.env.API_SECRET\n});\n\nclass Details extends React.Component {\n  state = { loading: true, showModal: false };\n  componentDidMount() {\n    petfinder.pet\n      .get({\n        output: \"full\",\n        id: this.props.id\n      })\n      .then(data => {\n        let breed;\n        if (Array.isArray(data.petfinder.pet.breeds.breed)) {\n          breed = data.petfinder.pet.breeds.breed.join(\", \");\n        } else {\n          breed = data.petfinder.pet.breeds.breed;\n        }\n        this.setState({\n          name: data.petfinder.pet.name,\n          animal: data.petfinder.pet.animal,\n          location: `${data.petfinder.pet.contact.city}, ${\n            data.petfinder.pet.contact.state\n          }`,\n          description: data.petfinder.pet.description,\n          media: data.petfinder.pet.media,\n          breed,\n          loading: false\n        });\n      })\n      .catch(() => {\n        navigate(\"/\");\n      });\n  }\n  toggleModal = () => this.setState({ showModal: !this.state.showModal });\n  render() {\n    if (this.state.loading) {\n      return <h1>loading … </h1>;\n    }\n\n    const {\n      media,\n      animal,\n      breed,\n      location,\n      description,\n      name,\n      showModal\n    } = this.state;\n\n    return (\n      <div className=\"details\">\n        <Carousel media={media} />\n        <div>\n          <h1>{name}</h1>\n          <h2>{`${animal} — ${breed} — ${location}`}</h2>\n          <button onClick={this.toggleModal}>Adopt {name}</button>\n          <p>{description}</p>\n          {showModal ? (\n            <Modal>\n              <h1>Would you like to adopt {name}?</h1>\n              <div className=\"buttons\">\n                <button onClick={this.toggleModal}>Yes</button>\n                <button onClick={this.toggleModal}>No</button>\n              </div>\n            </Modal>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Details;\n"]}